/**
 * @file AI Invoice Creator client component
 * @description
 * Client component for AI-assisted invoice creation.
 * Implements multi-step flow for LLM processing.
 */

"use client"
import { createInvoiceAction } from "@/actions/db/invoices-actions"
import { LLMProcessing } from "@/components/app/llm"
import { useToast } from "@/components/ui/use-toast"
import { LLMParseResult } from "@/types"
import { useRouter } from "next/navigation"
import { useState } from "react"

interface AIInvoiceCreatorProps {
  userId: string
  initialClient: any
  initialTemplate: any
  onSwitchToManual: () => void
}

/**
 * Client component for AI-assisted invoice creation
 */
export function AIInvoiceCreator({
  userId,
  initialClient,
  initialTemplate,
  onSwitchToManual
}: AIInvoiceCreatorProps) {
  const [isGenerating, setIsGenerating] = useState(false)
  const { toast } = useToast()
  const router = useRouter()
  
  /**
   * Convert LLM parse result to invoice data
   * @param result - The LLM parse result
   * @returns Object with invoice data and items
   */
  const convertToInvoiceData = (result: LLMParseResult) => {
    // Calculate invoice totals from items
    const subtotal = result.items.reduce(
      (sum, item) => sum + parseFloat(item.subtotal || "0"),
      0
    ).toFixed(2)
    
    const taxAmount = result.items.reduce(
      (sum, item) => sum + parseFloat(item.taxAmount || "0"),
      0
    ).toFixed(2)
    
    const discount = result.document.discount || "0"
    const total = (
      parseFloat(subtotal) +
      parseFloat(taxAmount) -
      parseFloat(discount)
    ).toFixed(2)
    
    // Prepare invoice data
    const invoiceData = {
      userId,
      clientId: result.client.id || "", // This will be empty if no matching client was found
      invoiceNumber: "", // Will be generated by the server action
      issueDate: new Date(result.document.issueDate || new Date()),
      dueDate: new Date(result.document.dueDate || new Date(Date.now() + 30*24*60*60*1000)),
      status: "draft" as const,
      notes: result.document.notes || "",
      termsAndConditions: initialTemplate?.terms || "",
      discount: discount,
      // Set calculated totals
      subtotal: subtotal,
      taxAmount: taxAmount,
      total: total
    }
    
    // Prepare invoice items
    const invoiceItems = result.items.map(item => ({
      description: item.description,
      quantity: item.quantity,
      unitPrice: item.unitPrice,
      taxRate: item.taxRate || "0",
      taxAmount: item.taxAmount || "0",
      subtotal: item.subtotal || "0",
      total: item.total || "0",
      // The invoiceId will be added by the server
      invoiceId: ""
    }))
    
    return { invoiceData, invoiceItems }
  }
  
  /**
   * Handle generate invoice button click
   * @param result - The LLM parse result
   */
  const handleGenerateInvoice = async (result: LLMParseResult) => {
    setIsGenerating(true)
    
    try {
      // Convert LLM result to invoice data
      const { invoiceData, invoiceItems } = convertToInvoiceData(result)
      
      // If no client ID was found, show error with more helpful message
      if (!invoiceData.clientId) {
        let errorMessage = "Please select an existing client or create a new one before generating an invoice."
        
        // If there's a suggested match, mention it
        if (result.client?.suggestedMatch) {
          errorMessage = `We found a similar client "${result.client.suggestedMatch.name}". Please confirm if this is the correct client or create a new one.`
        }
        
        toast({
          title: "Client Required",
          description: errorMessage,
          variant: "destructive"
        })
        setIsGenerating(false)
        return
      }
      
      // Create invoice
      const createResult = await createInvoiceAction(invoiceData, invoiceItems)
      
      if (createResult.isSuccess) {
        toast({
          title: "Success",
          description: "Invoice created successfully"
        })
        
        // Navigate to the invoice page
        router.push(`/app/invoices/${createResult.data.invoice.id}`)
        router.refresh()
      } else {
        toast({
          title: "Error",
          description: createResult.message,
          variant: "destructive"
        })
      }
    } catch (error) {
      console.error("Error generating invoice:", error)
      toast({
        title: "Error",
        description: "An unexpected error occurred. Please try again.",
        variant: "destructive"
      })
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <div className="space-y-4">
      <LLMProcessing 
        userId={userId}
        type="invoice"
        onComplete={(result) => console.log('Invoice processing complete:', result)}
        onCancel={onSwitchToManual}
        onGenerate={handleGenerateInvoice}
      />
    </div>
  )
}