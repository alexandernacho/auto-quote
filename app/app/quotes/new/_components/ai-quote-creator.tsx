/**
 * @file AI Quote Creator client component
 * @description
 * Client component for AI-assisted quote creation.
 * Implements multi-step flow for LLM processing.
 */

"use client"
import { createQuoteAction } from "@/actions/db/quotes-actions"
import { LLMInputForm, LLMProcessing, LLMResults } from "@/components/app/llm"
import { useToast } from "@/components/ui/use-toast"
import { useLLMProcessing } from "@/lib/hooks/use-llm-processing"
import { LLMParseResult } from "@/types"
import { useRouter } from "next/navigation"
import { useState } from "react"

interface AIQuoteCreatorProps {
  userId: string
  initialClient: any
  initialTemplate: any
  onSwitchToManual: () => void
}

/**
 * Client component for AI-assisted quote creation
 */
export function AIQuoteCreator({
  userId,
  initialClient,
  initialTemplate,
  onSwitchToManual
}: AIQuoteCreatorProps) {
  // Get LLM processing state from custom hook
  const {
    state,
    parseResult,
    handleParsedResult,
    handleReset
  } = useLLMProcessing()
  
  const [isGenerating, setIsGenerating] = useState(false)
  const { toast } = useToast()
  const router = useRouter()
  
  /**
   * Convert LLM parse result to quote data
   * @param result - The LLM parse result
   * @returns Object with quote data and items
   */
  const convertToQuoteData = (result: LLMParseResult) => {
    // Prepare quote data
    const quoteData = {
      userId,
      clientId: result.client.id || "", // This will be empty if no matching client was found
      quoteNumber: "", // Will be generated by the server action
      issueDate: new Date(result.document.issueDate || new Date()),
      validUntil: new Date(result.document.validUntil || new Date(Date.now() + 30*24*60*60*1000)),
      status: "draft" as const,
      notes: result.document.notes || "",
      termsAndConditions: initialTemplate?.terms || "",
      discount: result.document.discount || "0",
      // These will be calculated by the server
      subtotal: "0",
      taxAmount: "0",
      total: "0"
    }
    
    // Prepare quote items
    const quoteItems = result.items.map(item => ({
      description: item.description,
      quantity: item.quantity,
      unitPrice: item.unitPrice,
      taxRate: item.taxRate || "0",
      taxAmount: item.taxAmount || "0",
      subtotal: item.subtotal || "0",
      total: item.total || "0",
      // The quoteId will be added by the server
      quoteId: ""
    }))
    
    return { quoteData, quoteItems }
  }
  
  /**
   * Handle generate quote button click
   * @param result - The LLM parse result
   */
  const handleGenerateQuote = async (result: LLMParseResult) => {
    setIsGenerating(true)
    
    try {
      // Convert LLM result to quote data
      const { quoteData, quoteItems } = convertToQuoteData(result)
      
      // If no client ID was found, show error
      if (!quoteData.clientId) {
        toast({
          title: "Client Required",
          description: "Please select an existing client or create a new one before generating a quote.",
          variant: "destructive"
        })
        setIsGenerating(false)
        return
      }
      
      // Create quote
      const createResult = await createQuoteAction(quoteData, quoteItems)
      
      if (createResult.isSuccess) {
        toast({
          title: "Success",
          description: "Quote created successfully"
        })
        
        // Navigate to the quote page
        router.push(`/app/quotes/${createResult.data.quote.id}`)
        router.refresh()
      } else {
        toast({
          title: "Error",
          description: createResult.message,
          variant: "destructive"
        })
      }
    } catch (error) {
      console.error("Error generating quote:", error)
      toast({
        title: "Error",
        description: "An unexpected error occurred. Please try again.",
        variant: "destructive"
      })
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <div className="space-y-4">
      {state === 'input' && (
        <LLMInputForm 
          userId={userId} 
          type="quote" 
          onParsedResult={handleParsedResult} 
        />
      )}
      
      {(state === 'processing' || state === 'clarification') && (
        <LLMProcessing 
          userId={userId}
          type="quote"
          onComplete={handleParsedResult}
          onCancel={onSwitchToManual}
        />
      )}
      
      {state === 'review' && parseResult && (
        <LLMResults 
          result={parseResult}
          type="quote"
          onGenerate={handleGenerateQuote}
        />
      )}
    </div>
  )
} 